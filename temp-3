import os
import warnings
import sys

import pandas as pd
import numpy as np
from urllib.parse import urlparse
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
import mlflow
import mlflow.sklearn
from sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve
import logging

logging.basicConfig(level=logging.WARN)
logger = logging.getLogger(__name__)



if __name__ == "__main__":
    import warnings
    warnings.filterwarnings("ignore")
    matches_df = pd.read_csv("IPL_Matches_2008_2022_updated.csv")
    balls_df = pd.read_csv("IPL_Ball_by_Ball_2008_2022_updated.csv")

    matches_df.drop(['Unnamed: 0'], axis=1, inplace=True)
    balls_df.drop(['Unnamed: 0'], axis=1, inplace=True)
    matches_df.columns = [x.lower() for x in matches_df.columns]

    balls_df.columns = [x.lower() for x in balls_df.columns]
    # print(matches_df.columns)
    # print(balls_df.columns)
    # print(matches_df.shape)
    # print(balls_df.shape)

    matches_df['season'] = matches_df['season'].str.replace('2020/21', '2021')
    matches_df['season'] = matches_df['season'].str.replace('2009/10', '2010')
    matches_df['season'] = matches_df['season'].str.replace('2007/08', '2008')
    # print (matches_df['season'].value_counts())

    # print("Removing the matches with No-Results")
    no_results_id = list(set(matches_df[matches_df['wonby'] == "NoResults"]['id'].values))
    # print(no_results_id)
    matches_df = matches_df[matches_df['wonby'] != "NoResults"]
    balls_df = balls_df[~balls_df['id'].isin(no_results_id)]
    # print(matches_df.shape)
    # print(balls_df.shape)

    current_ipl_teams = ['Chennai Super Kings',
                         'Delhi Capitals',
                         'Mumbai Indians',
                         'Gujarat Titans',
                         'Kolkata Knight Riders',
                         'Lucknow Super Giants',
                         'Punjab Kings',
                         'Rajasthan Royals',
                         'Royal Challengers Bangalore',
                         'Sunrisers Hyderabad']

    team_hash = {}
    for x in range(0, len(current_ipl_teams)):
        team_hash[current_ipl_teams[x]] = x + 1
    print(team_hash)

    matches_df['team1'] = matches_df['team1'].str.replace('Kings XI Punjab', 'Punjab Kings')
    matches_df['team1'] = matches_df['team1'].str.replace('Deccan Chargers', 'Sunrisers Hyderabad')
    matches_df['team1'] = matches_df['team1'].str.replace('Delhi Daredevils', 'Delhi Capitals')

    matches_df['team2'] = matches_df['team2'].str.replace('Deccan Chargers', 'Sunrisers Hyderabad')
    matches_df['team2'] = matches_df['team2'].str.replace('Delhi Daredevils', 'Delhi Capitals')
    matches_df['team2'] = matches_df['team2'].str.replace('Kings XI Punjab', 'Punjab Kings')

    matches_df['winningteam'] = matches_df['winningteam'].str.replace('Kings XI Punjab', 'Punjab Kings')
    matches_df['winningteam'] = matches_df['winningteam'].str.replace('Deccan Chargers', 'Sunrisers Hyderabad')
    matches_df['winningteam'] = matches_df['winningteam'].str.replace('Delhi Daredevils', 'Delhi Capitals')

    matches_df['tosswinner'] = matches_df['tosswinner'].str.replace('Kings XI Punjab', 'Punjab Kings')
    matches_df['tosswinner'] = matches_df['tosswinner'].str.replace('Deccan Chargers', 'Sunrisers Hyderabad')
    matches_df['tosswinner'] = matches_df['tosswinner'].str.replace('Delhi Daredevils', 'Delhi Capitals')

    balls_df['winningteam'] = balls_df['winningteam'].str.replace('Kings XI Punjab', 'Punjab Kings')
    balls_df['battingteam'] = balls_df['battingteam'].str.replace('Kings XI Punjab', 'Punjab Kings')
    balls_df['bowlingteam'] = balls_df['bowlingteam'].str.replace('Kings XI Punjab', 'Punjab Kings')

    # print(matches_df.shape)
    # print(balls_df.shape)
    final_df = matches_df.merge(balls_df, how='inner', on='id')
    # print (final_df.shape)

    var_mod = ['tossdecision', 'city_x', 'venue', 'umpire1', 'wonby']
    le = LabelEncoder()
    for i in var_mod:
        final_df[i] = le.fit_transform(final_df[i])

    final_df = final_df.replace({'team1': team_hash})
    final_df = final_df.replace({'team2': team_hash})
    final_df = final_df.replace({'tosswinner': team_hash})
    final_df = final_df.replace({'winningteam_x': team_hash})
    # print (final_df.head())

    x = final_df[['team1', 'team2', 'tossdecision', 'tosswinner', 'city_x', 'venue', 'season', 'wonby', 'umpire1']]
    y = final_df[['winningteam_x']]
    # print (x.head())

    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=50)

    kfold = StratifiedKFold(n_splits=10)

    random_state = 2
    classifiers = []
    # classifiers.append(DecisionTreeClassifier(random_state=random_state))
    # classifiers.append(["RandomForestClassifier",RandomForestClassifier(random_state=random_state)])
    # classifiers.append(["KNeighborsClassifier",KNeighborsClassifier()])
    # classifiers.append(LogisticRegression(random_state=random_state, solver='lbfgs', max_iter=10000))
    classifiers.append(["LinearDiscriminantAnalysis",LinearDiscriminantAnalysis()])

    # cv_results = []
    # for classifier in classifiers:
    #     print (classifier[0])
    #     cv_results.append(cross_val_score(classifier[1], X_train, y=y_train.values.ravel(), scoring="accuracy", cv=kfold, n_jobs=4))
    #
    # cv_means = []
    # cv_std = []
    # for cv_result in cv_results:
    #     cv_means.append(cv_result.mean())
    #     cv_std.append(cv_result.std())
    #
    # cv_res = pd.DataFrame(
    #     {"CrossValMeans": cv_means, "CrossValerrors": cv_std, "Algorithm": ["RandomForestClassifier","KNeighbours",
    #                                                                         "LinearDiscriminantAnalysis"]})
    # print (cv_res)

    mlflow.end_run()
    experiment_name = 'IPL_MS_DS_Demo'
    mlflow.set_experiment(experiment_name)

    with mlflow.start_run():
        for classifier in classifiers:
            print (classifier[0])
            cv_result = cross_val_score(classifier[1], X_train, y=y_train.values.ravel(), scoring="accuracy", cv=kfold, n_jobs=4)

            mlflow.log_param("Classifier", str(classifier[0]) )
            mlflow.log_param("CrossValMeans", cv_result.mean())
            mlflow.log_param("CrossValerrors", cv_result.std())

        # tracking_url_type_store = urlparse(mlflow.get_tracking_uri()).scheme
        #
        # # Model registry does not work with file store
        # if tracking_url_type_store != "file":
        #     mlflow.sklearn.log_model(lr_model, "model", registered_model_name="LogisticRegression")
        # else:
        #     mlflow.sklearn.log_model(lr_model, "model")
    mlflow.end_run()

